ylab = "Job Openings",
panel.first = grid())
cor_SA_JO <- round(cor(SA$Mean_Salary, JO$Mean_JobOpenings), 3)
paste0("The corelation value between Salary & Job Openings in the US: ", cor_SA_JO)
list.files("./datasets")
list.files("./datasets", recursive = T)
?list.files
filesAvailable <- list.files("./datasets", recursive = T)
get_xls_file_from_html()
View(DF$Date)
download.file('https://www.glassdoor.com/research/app/uploads/sites/2/2019/12/LPR_data-2018-10.xlsx', destfile = '.datasets/2018-10.xlsx', mode="wb")
download.file('https://www.glassdoor.com/research/app/uploads/sites/2/2019/12/LPR_data-2018-10.xlsx', destfile = './datasets/2018-10.xlsx', mode="wb")
knitr::opts_chunk$set(echo = TRUE)
library('readxl')
library('rvest')
library('lubridate')
library('zoo')
library('openxlsx')
library('tidyverse')
# library('kableExtra')
get_xls_file_from_html <- function() {
dataurl <- "https://www.glassdoor.com/research/job-market-report-historical/"
page <- read_html(dataurl)
excels1 <- grep("\\.xlsx", html_nodes(page, "a"), value = T)
excels2 <- gsub(".*href=\"", "", excels1)
excels <- gsub("xlsx.*", "xlsx", excels2)
excels_path <- as.character(sapply(excels,
FUN = substr,
start = 64,
stop = max(sapply(excels, nchar))))
excels_path1_31 <- gsub(".*data-", "", excels_path[1:31])
excels_path[32] <- "2017-05.xlsx"
excels_path[33] <- "2017-04.xlsx"
excels_path[34] <- "2017-03.xlsx"
excels_path[35] <- "2017-02.xlsx"
excels_path[36] <- "2017-01.xlsx"
excels_path[37] <- "2016-12.xlsx"
excels_path[38] <- "2016-11.xlsx"
excels_path[39] <- "2016-10.xlsx"
excels_path <- c(excels_path1_31, excels_path[32:39])
destination <- paste("./datasets/", excels_path, sep = "")
#file extraction
mapply(function(x, y) download.file(x, y, mode="wb"), x = excels, y = destination)
}
load("filespath.RData")
checkIfFilesExist <- function(path){
if (!file.exists(path)) {
get_xls_file_from_html()
}
}
select_files_to_read <- function(month = "Dec", year = 2019) {
load("filespath.RData")
if (month == "Dec") {
month_num = 1
} else if (month == "Nov") {
month_num = 2
} else if (month == "Oct") {
month_num = 3
} else if (month == "Sep") {
month_num = 4
} else if (month == "Aug") {
month_num = 5
} else if (month == "Jul") {
month_num = 6
} else if (month == "Jun") {
month_num = 7
} else if (month == "May") {
month_num = 8
} else if (month == "Apr") {
month_num = 9
} else if (month == "Mar") {
month_num = 10
} else if (month == "Feb") {
month_num = 11
} else {
month_num = 12
}
files <- list("2019" = filespath[1:12],
"2018" = filespath[13:24],
"2017" = filespath[25:36],
"2016" = filespath[37:39])
if (year == 2016) {
yearOrder <- 4
if (month == "Dec" | month == "Nov" | month == "Oct") {
xlsname <<- paste0(month, year)
year_char <- as.character(year)
tempfilename <<- as.data.frame(read_xlsx(files[[yearOrder]][month_num]))
} else {
stop("Year 2016 have Dec, Nov and Oct files only.")
}
} else {
xlsname <<- paste0(month, year)
if (year == 2019) {
yearOrder <- 1
} else if (year == 2018) {
yearOrder <- 2
} else {
yearOrder <- 3
}
tempfilename <<- as.data.frame(read_xlsx(files[[yearOrder]][month_num]))
}
}
dump("select_files_to_read", file = "select_files_to_read.R")
loadMultipleFiles <- function(nmonth = c("Dec"), nyear = c(2019)) {
files_list1 <- list()
year <- 1:length(nyear)
month <- 1:length(nmonth)
totalIterate <<- length(nmonth) * length(nyear)
for (i in year) {
if (length(year) == 1) {
for (j in month) {
select_files_to_read(nmonth[j], nyear)
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
break
}
for (j in month) {
select_files_to_read(nmonth[j], nyear[i])
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
}
files_list <<- files_list1
}
loadMultipleFiles(
nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"),
nyear = c(2018))
for (k in 1:totalIterate) {
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
}
loadMultipleFiles(
nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"),
nyear = c(2019))
for (k in 1:totalIterate) {
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
}
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
year2018 <- rbind(Apr2018, Aug2018, Dec2018, Feb2018, Jan2018, Jul2018, Jun2018, Mar2018, May2018, Nov2018, Oct2018, Sep2018)
year20182019 <- rbind(year2018, year2019)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library('readxl')
library('rvest')
library('lubridate')
library('zoo')
library('openxlsx')
library('tidyverse')
# library('kableExtra')
get_xls_file_from_html <- function() {
dataurl <- "https://www.glassdoor.com/research/job-market-report-historical/"
page <- read_html(dataurl)
excels1 <- grep("\\.xlsx", html_nodes(page, "a"), value = T)
excels2 <- gsub(".*href=\"", "", excels1)
excels <- gsub("xlsx.*", "xlsx", excels2)
excels_path <- as.character(sapply(excels,
FUN = substr,
start = 64,
stop = max(sapply(excels, nchar))))
excels_path1_31 <- gsub(".*data-", "", excels_path[1:31])
excels_path[32] <- "2017-05.xlsx"
excels_path[33] <- "2017-04.xlsx"
excels_path[34] <- "2017-03.xlsx"
excels_path[35] <- "2017-02.xlsx"
excels_path[36] <- "2017-01.xlsx"
excels_path[37] <- "2016-12.xlsx"
excels_path[38] <- "2016-11.xlsx"
excels_path[39] <- "2016-10.xlsx"
excels_path <- c(excels_path1_31, excels_path[32:39])
destination <- paste("./datasets/", excels_path, sep = "")
#file extraction
mapply(function(x, y) download.file(x, y, mode="wb"), x = excels, y = destination)
}
load("filespath.RData")
checkIfFilesExist <- function(path){
if (!file.exists(path)) {
get_xls_file_from_html()
}
}
select_files_to_read <- function(month = "Dec", year = 2019) {
load("filespath.RData")
if (month == "Dec") {
month_num = 1
} else if (month == "Nov") {
month_num = 2
} else if (month == "Oct") {
month_num = 3
} else if (month == "Sep") {
month_num = 4
} else if (month == "Aug") {
month_num = 5
} else if (month == "Jul") {
month_num = 6
} else if (month == "Jun") {
month_num = 7
} else if (month == "May") {
month_num = 8
} else if (month == "Apr") {
month_num = 9
} else if (month == "Mar") {
month_num = 10
} else if (month == "Feb") {
month_num = 11
} else {
month_num = 12
}
files <- list("2019" = filespath[1:12],
"2018" = filespath[13:24],
"2017" = filespath[25:36],
"2016" = filespath[37:39])
if (year == 2016) {
yearOrder <- 4
if (month == "Dec" | month == "Nov" | month == "Oct") {
xlsname <<- paste0(month, year)
year_char <- as.character(year)
tempfilename <<- as.data.frame(read_xlsx(files[[yearOrder]][month_num]))
} else {
stop("Year 2016 have Dec, Nov and Oct files only.")
}
} else {
xlsname <<- paste0(month, year)
if (year == 2019) {
yearOrder <- 1
} else if (year == 2018) {
yearOrder <- 2
} else {
yearOrder <- 3
}
tempfilename <<- as.data.frame(read_xlsx(files[[yearOrder]][month_num]))
}
}
dump("select_files_to_read", file = "select_files_to_read.R")
loadMultipleFiles <- function(nmonth = c("Dec"), nyear = c(2019)) {
files_list1 <- list()
year <- 1:length(nyear)
month <- 1:length(nmonth)
totalIterate <<- length(nmonth) * length(nyear)
for (i in year) {
if (length(year) == 1) {
for (j in month) {
select_files_to_read(nmonth[j], nyear)
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
break
}
for (j in month) {
select_files_to_read(nmonth[j], nyear[i])
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
}
files_list <<- files_list1
}
loadMultipleFiles(
nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"),
nyear = c(2018))
for (k in 1:totalIterate) {
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
}
loadMultipleFiles(
nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"),
nyear = c(2019))
for (k in 1:totalIterate) {
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
}
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
year2018 <- rbind(Apr2018, Aug2018, Dec2018, Feb2018, Jan2018, Jul2018, Jun2018, Mar2018, May2018, Nov2018, Oct2018, Sep2018)
year20182019 <- rbind(year2018, year2019)
# for ease of use and saving more memory, we need to remove all unnecessary objects
temp_objects <- ls()
temp_objects
temp_objects[!temp_objects %in% c("year20182019")])
temp_objects[!temp_objects %in% c("year20182019")]
as.data.frame(unique(DF$Date))
knitr::opts_chunk$set(echo = TRUE)
library('readxl')
library('rvest')
library('lubridate')
library('zoo')
library('openxlsx')
library('tidyverse')
# library('kableExtra')
get_xls_file_from_html <- function() {
dataurl <- "https://www.glassdoor.com/research/job-market-report-historical/"
page <- read_html(dataurl)
excels1 <- grep("\\.xlsx", html_nodes(page, "a"), value = T)
excels2 <- gsub(".*href=\"", "", excels1)
excels <- gsub("xlsx.*", "xlsx", excels2)
excels_path <- as.character(sapply(excels,
FUN = substr,
start = 64,
stop = max(sapply(excels, nchar))))
excels_path1_31 <- gsub(".*data-", "", excels_path[1:31])
excels_path[32] <- "2017-05.xlsx"
excels_path[33] <- "2017-04.xlsx"
excels_path[34] <- "2017-03.xlsx"
excels_path[35] <- "2017-02.xlsx"
excels_path[36] <- "2017-01.xlsx"
excels_path[37] <- "2016-12.xlsx"
excels_path[38] <- "2016-11.xlsx"
excels_path[39] <- "2016-10.xlsx"
excels_path <- c(excels_path1_31, excels_path[32:39])
destination <- paste("./datasets/", excels_path, sep = "")
#file extraction
mapply(function(x, y) download.file(x, y, mode="wb"), x = excels, y = destination)
}
load("filespath.RData")
checkIfFilesExist <- function(path){
if (!file.exists(path)) {
get_xls_file_from_html()
}
}
select_files_to_read <- function(month = "Dec", year = 2019) {
load("filespath.RData")
if (month == "Dec") {
month_num = 1
} else if (month == "Nov") {
month_num = 2
} else if (month == "Oct") {
month_num = 3
} else if (month == "Sep") {
month_num = 4
} else if (month == "Aug") {
month_num = 5
} else if (month == "Jul") {
month_num = 6
} else if (month == "Jun") {
month_num = 7
} else if (month == "May") {
month_num = 8
} else if (month == "Apr") {
month_num = 9
} else if (month == "Mar") {
month_num = 10
} else if (month == "Feb") {
month_num = 11
} else {
month_num = 12
}
files <- list("2019" = filespath[1:12],
"2018" = filespath[13:24],
"2017" = filespath[25:36],
"2016" = filespath[37:39])
if (year == 2016) {
yearOrder <- 4
if (month == "Dec" | month == "Nov" | month == "Oct") {
xlsname <<- paste0(month, year)
year_char <- as.character(year)
tempfilename <<- as.data.frame(read_xlsx(files[[yearOrder]][month_num]))
} else {
stop("Year 2016 have Dec, Nov and Oct files only.")
}
} else {
xlsname <<- paste0(month, year)
if (year == 2019) {
yearOrder <- 1
} else if (year == 2018) {
yearOrder <- 2
} else {
yearOrder <- 3
}
tempfilename <<- as.data.frame(read_xlsx(files[[yearOrder]][month_num]))
}
}
dump("select_files_to_read", file = "select_files_to_read.R")
loadMultipleFiles <- function(nmonth = c("Dec"), nyear = c(2019)) {
files_list1 <- list()
year <- 1:length(nyear)
month <- 1:length(nmonth)
totalIterate <<- length(nmonth) * length(nyear)
for (i in year) {
if (length(year) == 1) {
for (j in month) {
select_files_to_read(nmonth[j], nyear)
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
break
}
for (j in month) {
select_files_to_read(nmonth[j], nyear[i])
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
}
files_list <<- files_list1
}
loadMultipleFiles(
nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"),
nyear = c(2018))
for (k in 1:totalIterate) {
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
}
loadMultipleFiles(
nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"),
nyear = c(2019))
for (k in 1:totalIterate) {
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
}
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
year2018 <- rbind(Apr2018, Aug2018, Dec2018, Feb2018, Jan2018, Jul2018, Jun2018, Mar2018, May2018, Nov2018, Oct2018, Sep2018)
year20182019 <- rbind(year2018, year2019)
## if you want, you can save the year dataframe as xls file in local directory
# write.xlsx(year2019, "./datasets/year2019.xlsx")
# write.xlsx(year2018, "./datasets/year2018.xlsx")
# write.xlsx(year20182019, "./datasets/year2018-2019.xlsx")
# for ease of use and saving more memory, we need to remove all unnecessary objects
temp_objects <- ls()
rm(list = temp_objects[!temp_objects %in% c("year20182019")])
rm(temp_objects)
str(year20182019)
colnames(year20182019) <- c("Metro", "Dimension_Type", "Date", "Dimension", "Measure", "Value", "YoY")
year20182019 %>% is.na() %>% colSums()
year20182019[is.na(year20182019$Dimension),]
year20182019[is.na(year20182019$Value),]
year20182019[is.na(year20182019$YoY),]
DF <- year20182019[-c(length(year20182019))]
DF <- drop_na(DF)
head(DF)
is.na(DF) %>% colSums()
DF <- DF[DF$Dimension != "Labor Force Size" &
DF$Dimension != "Total Employment" &
DF$Dimension != "Unemployment Rate",]
head(DF)
is.na(DF) %>% colSums()
unique(DF$Metro)
DF$Metro <- as.factor(sapply(as.character(DF$Metro), switch,
"National" = "National",
"Atlanta" = "Atlanta",
"New York City" = "New York City",
"Los Angeles" = "Los Angeles",
"Philadelphia" = "Philadelphia",
"Houston" = "Houston",
"Seattle" = "Seattle",
"San Francisco" = "San Francisco",
"Chicago" = "Chicago",
"Boston" = "Boston",
"Washington DC" = "Washington DC",
"U.S." = "National",
"New-York-City" = "New York City",
"Los-Angeles" = "Los Angeles",
"San-Francisco" = "San Francisco",
"Washington-DC" = "Washington DC"))
levels(DF$Metro)
unique(DF$Dimension_Type)
DF$Dimension_Type <- as.factor(DF$Dimension_Type)
unique(DF$Dimension)
length(unique(DF$Dimension))
unique(DF$Measure)
DF$Measure <- as.factor(DF$Measure)
head(DF$Date)
tail(DF$Date)
as.data.frame(unique(DF$Date))
airlines <-  nycflights13::airlines
AirPassengers
airmiles
airlines
nycflights13::airports
data()
data(package = .packages(all.available = TRUE))
boot::city
head(engsoccerdata::champs)
colnames(engsoccerdata::champs)
nrow(engsoccerdata::champs)
head(ggmap::crime)
crimeDF <- ggmap::crime
head(crimeDF)
is.na(crimeDF) %>% colSums()
crimeDF[is.na(crimeDF$location),]
head(crimeDF[is.na(crimeDF$location),])
head(airlines)
airports <- nycflights13::airports
head(airports)
unique(airports$tzone)
unique(airports$name)
nrow(airports)
head(airports)
unique(airports$faa)
"CGK" %in% unique(airports$faa)
"MWA" %in% unique(airports$faa)
head(crimeDF)
unique(crimeDF$type)
type(crimeDF$date)
class(crimeDF$date)
tail(crimeDF)
class(mdy(crimeDF$date))
unique(mdy(crimeDF$date))
head(airports)
rm(crimeDF)
flights <- nycflights13::flights
head(flights)
unique(flights$year)
unique(flights$month)
unique(flights$day)
planes <- nycflights13::planes
head(planes)
nrow(planes)
is.na(planes) %>% colSums()
weather <- nycflights13::weather
head(weather)
unique(weather$origin)
head(airports)
?rename
?rename
?rename
unique(airports$tzone)
semi head(flights)
head(flights)
colnames(flights)
head(flights[,11:19])
tail(flights[,11:19])
