excels_path <- as.character(sapply(excels,
FUN = substr,
start = 64,
stop = max(sapply(excels, nchar))))
excels_path1_31 <- gsub(".*data-", "", excels_path[1:31])
excels_path[32] <- "2017-05.xlsx"
excels_path[33] <- "2017-04.xlsx"
excels_path[34] <- "2017-03.xlsx"
excels_path[35] <- "2017-02.xlsx"
excels_path[36] <- "2017-01.xlsx"
excels_path[37] <- "2016-12.xlsx"
excels_path[38] <- "2016-11.xlsx"
excels_path[39] <- "2016-10.xlsx"
excels_path <- c(excels_path1_31, excels_path[32:39])
destination <- paste("./datasets/", excels_path, sep = "")
#file extraction
mapply(function(x, y) download.file(x, y, mode="wb"), x = excels, y = destination)
}
load("filespath.RData")
if (!file.exists(filespath)) {
get_xls_file_from_html
}
# check_if_fileexist <- function(){
#     if (!file.exists(filespath)) {
#         get_xls_file_from_html
#     }
# }
# mapply(check_if_fileexist)
source("select_files_to_read.R")
# select_files_to_read("Dec", 2019)
myexport <- function(...) {
arg.list <- list(...)
names <- all.names(match.call())[-1]
for (i in seq_along(names)) assign(names[i],arg.list[[i]],.GlobalEnv)
}
loadMultipleFiles <- function(nmonth = c("Dec"), nyear = c(2019)) {
files_list1 <- list()
year <- 1:length(nyear)
month <- 1:length(nmonth)
totalIterate <<- length(nmonth) * length(nyear)
for (i in year) {
if (length(year) == 1) {
for (j in month) {
select_files_to_read(nmonth[j], nyear)
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
break
}
for (j in month) {
# browser()
select_files_to_read(nmonth[j], nyear[i])
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
# browser()
}
# browser()
}
files_list <<- files_list1
}
loadMultipleFiles(nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"))
for (k in 1:totalIterate) {
# browser()
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
# browser()
}
rm(files_list, tempfilename)
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
colnames(year2019) <- c("Metro", "Dimension_Type", "Year_Month", "Dimension", "Measure", "Value", "YoY")
library(tidyverse)
install.packages("ggthemes")
pivot_wider(data = year2019, names_from = Dimension_Type, values_from = Dimension)
year2019 %>%
filter(Dimension_Type == "Jobs Title") %>%
select(Metro, Year_Month, Dimension, Value, YoY)
year2019 %>%
filter(Dimension_Type == "Job Title") %>%
select(Metro, Year_Month, Dimension, Value, YoY)
year2019 %>%
filter(Dimension_Type == "Job Title") %>%
select(Metro, Year_Month, Dimension, Value, YoY)
Salary_Jobs <- year2019 %>%
filter(Dimension_Type == "Job Title") %>%
select(Metro, Year_Month, Dimension, Value, YoY)
colnames(Salary_Jobs) <- (c("Area","Date","Job Title", "Salary", "YoY"))
Salary_Jobs
colnames(Salary_Jobs) <- (c("Area","Date","Job_Title", "Salary", "YoY"))
Salary_Jobs
Salary_Sectors <- year2019 %>%
filter(Dimension_Type == "Industry" && Measure == "Median Base Pay") %>%
select(Metro, Year_Month, Dimension, Value, YoY)
Salary_Sectors
Salary_Sectors <- year2019 %>%
filter(Dimension_Type == "Industry" & Measure == "Median Base Pay") %>%
select(Metro, Year_Month, Dimension, Value, YoY)
Salary_Sectors
year2019 %>%
filter(Dimension_Type == "Industry" & Measure == "Median Base Pay")
Salary_Sectors <- year2019 %>%
filter(Dimension_Type == "Industry" & Measure == "Median Base Pay") %>%
select(Metro, Year_Month, Dimension, Value)
colnames(Salary_Sectors) <- (c("Area","Date","Sector", "Salary"))
Salary_Sectors
library(reinstallr)
reinstallr(path = "/home/utomoreza/R")
reinstallr(path = "/home/utomoreza/R")
use warnings()
warnings()
install.packages("magick")
Salary_CompanySize <- year2019 %>%
filter(Dimension_Type == "Company Size" & Measure == "Median Base Pay") %>%
select(Metro, Year_Month, Dimension, Value)
colnames(Salary_Sectors) <- (c("Area","Date","Company_Size", "Salary"))
Salary_CompanySize
JobOpening_Sectors <- year2019 %>%
filter(Dimension_Type == "Industry" & Measure == "Job Openings") %>%
select(Metro, Year_Month, Dimension, Value, YoY)
colnames(Salary_Sectors) <- (c("Area","Date","Sector", "Salary", "YoY"))
colnames(JobOpening_Sectors) <- (c("Area","Date","Sector", "Salary", "YoY"))
JobOpening_Sectors
colnames(JobOpening_Sectors) <- (c("Area","Date","Sector", "Openings", "YoY"))
JobOpening_Sectors
JobOpening_CompanySize <- year2019 %>%
filter(Dimension_Type == "Company Size" & Measure == "Job Openings") %>%
select(Metro, Year_Month, Dimension, Value, YoY)
colnames(JobOpening_CompanySize) <- c("Area","Date","Sector", "Openings", "YoY")
JobOpening_CompanySize
colnames(JobOpening_CompanySize) <- c("Area","Date","Company_Size", "Openings", "YoY")
JobOpening_CompanySize
install.packages("magick")
reinstallr(path = "/home/utomoreza/R")
install.packages("RMariaDB")
QuickFacts <- year2019 %>%
filter(Dimension_Type == "Quick Facts")
QuickFacts
QuickFacts <- year2019 %>%
filter(Dimension_Type == "Quick Facts") %>%
select(Metro, Year_Month, Dimension, Value, YoY)
QuickFacts
QuickFacts <- year2019 %>%
filter(Dimension_Type == "Quick Facts") %>%
select(Metro, Year_Month, Dimension, Value, YoY) %>%
pivot_wider(names_from = Dimesion, values_from = c(Value, YoY))
QuickFacts <- year2019 %>%
filter(Dimension_Type == "Quick Facts") %>%
select(Metro, Year_Month, Dimension, Value, YoY) %>%
pivot_wider(names_from = Dimension, values_from = c(Value, YoY))
QuickFacts
QuickFacts <- cbind(QuickFacts$Metro,
QuickFacts$Year_Month,
QuickFacts$`Value_Metro Median Pay`,
QuickFacts$`Value_U.S. Median Pay`,
QuickFacts$`Value_Metro Job Openings`,
QuickFacts$`Value_U.S. Job Openings`,
QuickFacts$`YoY_Metro Median Pay`,
QuickFacts$`YoY_U.S. Median Pay`,
QuickFacts$`YoY_Metro Job Openings`,
QuickFacts$`YoY_U.S. Job Openings`)
colnames(QuickFacts) <- c(c("Area","Date","Metro_Median_Pay", "US_Median_Pay",
"Metro_JobOpenings","US_JobOpenings","YoY_Metro_Median_Pay",
"YoY_US_Median_Pay","YoY_Metro_JobOpenings","YoY_US_JobOpenings"))
QuickFacts
QuickFacts <- data.frame(cbind(QuickFacts$Metro,
QuickFacts$Year_Month,
QuickFacts$`Value_Metro Median Pay`,
QuickFacts$`Value_U.S. Median Pay`,
QuickFacts$`Value_Metro Job Openings`,
QuickFacts$`Value_U.S. Job Openings`,
QuickFacts$`YoY_Metro Median Pay`,
QuickFacts$`YoY_U.S. Median Pay`,
QuickFacts$`YoY_Metro Job Openings`,
QuickFacts$`YoY_U.S. Job Openings`))
QuickFacts <- as.data.frame(cbind(QuickFacts$Metro,
QuickFacts$Year_Month,
QuickFacts$`Value_Metro Median Pay`,
QuickFacts$`Value_U.S. Median Pay`,
QuickFacts$`Value_Metro Job Openings`,
QuickFacts$`Value_U.S. Job Openings`,
QuickFacts$`YoY_Metro Median Pay`,
QuickFacts$`YoY_U.S. Median Pay`,
QuickFacts$`YoY_Metro Job Openings`,
QuickFacts$`YoY_U.S. Job Openings`))
QuickFacts <- year2019 %>%
filter(Dimension_Type == "Quick Facts") %>%
select(Metro, Year_Month, Dimension, Value, YoY) %>%
pivot_wider(names_from = Dimension, values_from = c(Value, YoY))
QuickFacts <- as.data.frame(cbind(QuickFacts$Metro,
QuickFacts$Year_Month,
QuickFacts$`Value_Metro Median Pay`,
QuickFacts$`Value_U.S. Median Pay`,
QuickFacts$`Value_Metro Job Openings`,
QuickFacts$`Value_U.S. Job Openings`,
QuickFacts$`YoY_Metro Median Pay`,
QuickFacts$`YoY_U.S. Median Pay`,
QuickFacts$`YoY_Metro Job Openings`,
QuickFacts$`YoY_U.S. Job Openings`))
QuickFacts
colnames(QuickFacts) <- c(c("Area","Date","Metro_Median_Pay", "US_Median_Pay",
"Metro_JobOpenings","US_JobOpenings","YoY_Metro_Median_Pay",
"YoY_US_Median_Pay","YoY_Metro_JobOpenings","YoY_US_JobOpenings"))
QuickFacts
colnames(QuickFacts) <- c("Area","Date","Metro_Median_Pay", "US_Median_Pay",
"Metro_JobOpenings","US_JobOpenings","YoY_Metro_Median_Pay",
"YoY_US_Median_Pay","YoY_Metro_JobOpenings","YoY_US_JobOpenings")
QuickFacts
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
is.na() %>%
colSums()
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
is.na()
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
nrow()
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
is.na() %>%
colSums()
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
is.na() %>%
nrow() %>%
colSums()
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
is.na() %>%
colSums() %>%
nrow()
nrow(year2019)
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
is.na() %>%
colSums()
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
nrow()
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
is.na() %>%
colSums()
year2019 %>%
filter(Dimension_Type == "Timeseries")
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
nrow()
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
is.na() %>%
colSums()
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
select(Metro, Year_Month, Dimension, Value) %>%
pivot_wider(names_from = Dimension, values_from = Value)
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
select(Metro, Year_Month, Dimension, Value)
year2019 %>%
filter(Dimension_Type == "Quick Facts") %>%
select(Metro, Year_Month, Dimension, Value, YoY) %>%
pivot_wider(names_from = Dimension, values_from = c(Value, YoY))
year2019 %>%
filter(Dimension_Type == "Quick Facts") %>%
select(Metro, Year_Month, Dimension, Value, YoY)
year2019 %>%
filter(Dimension_Type == "Quick Facts") %>%
is.na() %>% colSums()
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
select(Metro, Year_Month, Dimension, Value) %>%
pivot_wider(names_from = Dimension, values_from = as.numeric(Value))
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
select(Metro, Year_Month, Dimension, as.numeric(Value) %>%
pivot_wider(names_from = Dimension, values_from = Value)
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
select(Metro, Year_Month, Dimension, as.numeric(Value)) %>%
pivot_wider(names_from = Dimension, values_from = Value)
unique(year2019$Metro) # Change to Factor
unique(year2019$Dimension_Type) # Change to Factor
unique(year2019$Measure) # Change to Factor
unique(year2019$Dimension) # Keep the data type
year2019$Metro <- as.factor(year2019$Metro)
unique(year2019$Metro) # Change to Factor
# year2019$Dimension_Type <- as.factor(year2019$Dimension_Type)
# year2019$Measure <- as.factor(year2019$Measure)
# year2019$Year_Month <- as.Date(sapply(year2019$Year_Month, as.yearmon))
# for (i in nrow(year2019)) {
#     year2019$Year_Month[i] <- as.Date(as.yearmon(year2019$Year_Month[i]))
# }
#
# year(year2019$Month)
year2019$Dimension_Type <- as.factor(year2019$Dimension_Type)
year2019$Measure <- as.factor(year2019$Measure)
year2019
year2019$Measure <- as.numeric(year2019$Value)
year2019
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
year2019$Metro <- as.factor(year2019$Metro)
year2019$Dimension_Type <- as.factor(year2019$Dimension_Type)
year2019$Measure <- as.factor(year2019$Measure)
year2019$Value <- as.numeric(year2019$Value)
year2019
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
year2019$Metro <- as.factor(year2019$Metro)
year2019$Dimension_Type <- as.factor(year2019$Dimension_Type)
year2019$Measure <- as.factor(year2019$Measure)
year2019$Value %>%
is.expression()
"$" %in% year2019$Value
"$" in year2019$Value[1]
"$" %in% year2019$Value[1]
year2019$Value
class(year2019$Value)
"$" %in% year2019$Value
match('$', year2019$Value)
is.element('$',year2019$Value)
cc <- c("$", "a", 1, TRUE)
'$' %in% cc
cc <- c("$", "$", "a", 1, TRUE)
'$' %in% cc
cc <- c("$a", "$ b", "a", 1, TRUE)
'$' %in% cc
?grep
grep(pattern = '$', x = cc)
grepl(pattern = '$', x = cc)
cc <- c("$a", "$ b", "a", 1, TRUE)
grepl(pattern = '.*$.*', x = cc)
grepl(pattern = '1', x = cc)
grepl(pattern = '2', x = cc)
grepl(pattern = "$", x = cc)
grepl(pattern = "'$'", x = cc)
grepl(pattern = "'a'", x = cc)
grepl(pattern = "'$'", x = cc)
cc <- c("$a", "$", "a", 1, TRUE)
grepl(pattern = "$", x = cc)
cc <- c("$a", "$ a", "a", 1, TRUE)
grepl(pattern = "$ a", x = cc)
"$" %in% cc
cc <- c("$", "$ a", "a", 1, TRUE)
"$" %in% cc
cc <- c("$", "$ a", "a", 1, TRUE)
grepl(pattern = "$| ", x = cc)
year2019
listfruit  <- c("aapplea","bbananab","oranggeo")
gsub('.{1}$', '', listfruit)
?gsub
cc <- c("$", "$ a", "a", 1, TRUE, "$ 57,035", "$ 52,807")
gsub('^. ', '', cc)
gsub('^.', '', cc)
gsub('^. ', '', cc)
gsub('^. ', '', year2019$Value)
grep('.$', year2019$Value)
cc <- c("192,155", "5,580,498","$ 52,807", "$ 57,035")
grep('.$', cc)
grep('.'$'', cc)
grep('."$"', cc)
grep("[$].^ ", cc)
cc <- c("192,155", "5,580,498","$ 52,807", "$ 57,035")
grep("[$].^ ", cc)
grep("[$][^0-9]", cc)
grep("[$][^0-9]", year2019$Value)
cc <- c("192,155", "5,580,498","$ 52,807", "$ 57,035")
replace(cc, grep("[$][^0-9]", cc), gsub('^. ', '', cc))
for (i in 1:length(cc)){
replace(c[i], grep("[$][^0-9]", cc[i]), gsub('^. ', '', cc[i]))
}
lapply(cc, function(x) as.numeric(gsub("[,$]", "", x)))
lapply(year2019$Value, function(x) as.numeric(gsub("[,$]", "", x)))
?lapply
sapply(cc, function(x) as.numeric(gsub("[,$]", "", x)))
class(sapply(cc, function(x) as.numeric(gsub("[,$]", "", x))))
year2019$Value <- sapply(year2019$Value, function(x) as.numeric(gsub("[,$]", "", x)))
year2019
cc <- c("5%", "8%","-1%", "-%")
sapply(cc, function(x) as.numeric(gsub("[%]", "", x)))
cc <- c("5%", "8%","-1%", "-3%")
sapply(cc, function(x) as.numeric(gsub("[%]", "", x)))
sapply(cc, function(x) as.numeric(gsub("[%]", "", x))) %>%
/100
sapply(cc, function(x) as.numeric(gsub("[%]", "", x)))/100
year2019$YoY <- sapply(year2019$YoY, function(x) as.numeric(gsub("[%]", "", x)))/100
year2019
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
nrow()
year2019
colnames(year2019) <- c("Metro", "Dimension_Type", "Year_Month", "Dimension", "Measure", "Value", "YoY")
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
nrow()
year2019 %>%
filter(Dimension_Type == "Timeseries") %>%
is.na() %>%
colSums()
year2019
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
year2019
Aug2019
year2019
head(year2019[year2019$Month == "2019-08",])
?gsub
cc <- c("2019-04","2019-05","2019-04-21","2019-02-04")
sapply(cc, function(x) as.yearmon(cc))
cc <- c("2019-04","2019-05","2019-04","2019-02")
sapply(cc, function(x) as.yearmon(cc))
cc <- c("2019-04","2019-05","2019-04-21","2019-02-04")
gsub("[-]", "", cc)
reinstallr(path = "/home/utomoreza/R")
warnings()
install.packages('RGtk2')
q()
install.packages('shinydashboard')
knitr::opts_chunk$set(echo = TRUE)
library('readxl')
library('rvest')
library('lubridate')
library('zoo')
library('openxlsx')
library(tidyverse)
get_xls_file_from_html <- function() {
dataurl <- "https://www.glassdoor.com/research/job-market-report-historical/"
page <- read_html(dataurl)
excels1 <- grep("\\.xlsx", html_nodes(page, "a"), value = T)
excels2 <- gsub(".*href=\"", "", excels1)
excels <- gsub("xlsx.*", "xlsx", excels2)
excels_path <- as.character(sapply(excels,
FUN = substr,
start = 64,
stop = max(sapply(excels, nchar))))
excels_path1_31 <- gsub(".*data-", "", excels_path[1:31])
excels_path[32] <- "2017-05.xlsx"
excels_path[33] <- "2017-04.xlsx"
excels_path[34] <- "2017-03.xlsx"
excels_path[35] <- "2017-02.xlsx"
excels_path[36] <- "2017-01.xlsx"
excels_path[37] <- "2016-12.xlsx"
excels_path[38] <- "2016-11.xlsx"
excels_path[39] <- "2016-10.xlsx"
excels_path <- c(excels_path1_31, excels_path[32:39])
destination <- paste("./datasets/", excels_path, sep = "")
#file extraction
mapply(function(x, y) download.file(x, y, mode="wb"), x = excels, y = destination)
}
load("filespath.RData")
if (!file.exists(filespath)) {
get_xls_file_from_html
}
# check_if_fileexist <- function(){
#     if (!file.exists(filespath)) {
#         get_xls_file_from_html
#     }
# }
# mapply(check_if_fileexist)
source("select_files_to_read.R")
# select_files_to_read("Dec", 2019)
myexport <- function(...) {
arg.list <- list(...)
names <- all.names(match.call())[-1]
for (i in seq_along(names)) assign(names[i],arg.list[[i]],.GlobalEnv)
}
loadMultipleFiles <- function(nmonth = c("Dec"), nyear = c(2019)) {
files_list1 <- list()
year <- 1:length(nyear)
month <- 1:length(nmonth)
totalIterate <<- length(nmonth) * length(nyear)
for (i in year) {
if (length(year) == 1) {
for (j in month) {
select_files_to_read(nmonth[j], nyear)
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
break
}
for (j in month) {
# browser()
select_files_to_read(nmonth[j], nyear[i])
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
# browser()
}
# browser()
}
files_list <<- files_list1
}
loadMultipleFiles(nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"))
for (k in 1:totalIterate) {
# browser()
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
# browser()
}
rm(files_list, tempfilename)
# totalDF <- ls(pattern = "2019")
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
# write.xlsx(year2019, "./datasets/year2019.xlsx")
colnames(year2019) <- c("Metro", "Dimension_Type", "Year_Month", "Dimension", "Measure", "Value", "YoY")
unique(year2019$Metro) # Change to Factor
unique(year2019$Dimension_Type) # Change to Factor
unique(year2019$Measure) # Change to Factor
year2019$Metro <- as.factor(year2019$Metro)
year2019$Dimension_Type <- as.factor(year2019$Dimension_Type)
year2019$Measure <- as.factor(year2019$Measure)
year2019$Value <- sapply(year2019$Value, function(x) as.numeric(gsub("[,$]", "", x)))
year2019$YoY <- sapply(year2019$YoY, function(x) as.numeric(gsub("[%]", "", x)))/100
year2019
year2019[order(year2019$Year_Month),]
nchar(cc)
cc <- c("2019-04","2019-05","2019-04-21","2019-02-04")
nchar(cc)
q()
