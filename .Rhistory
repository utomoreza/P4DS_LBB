browser()
}
browser()
return(output)
}
sapply(DF$Value, DropDollar)
unique(input)
unique(DF$Value) #%>%
DropDollar <- function(input){
if (grepl("\\$", input)) {
output <- input %>%
str_replace("\\$ ", "") %>%
str_replace(",", "") %>%
str_replace(".0", "") %>%
as.numeric()
} else {
output <- input %>% str_replace(",", "") %>%
str_replace(".0", "") %>% as.numeric()
}
return(output)
}
DropDollar(input[2])
sapply(input, DropDollar)
DropDollar(a)
a <- "67738.0"
DropDollar(a)
getOption("max.print")
unique(input)
getOption("max.print")
unique(input); getOption("max.print")
DropDollar <- function(input){
if (grepl("\\$", input)) {
output <- input %>%
str_replace("\\$ ", "") %>%
str_replace(",", "") %>%
str_replace(".0", "") %>%
as.numeric()
} else {
output <- input %>% str_replace(",", "") %>%
str_replace(".0", "") %>% as.numeric()
}
return(output)
}
DF$Value <- sapply(DF$Value, DropDollar)
options(max.print=1000000)
unique(input)
DropDollar <- function(input){
output <- input %>%
str_replace("\\$ ", "") %>%
str_replace(",", "") %>%
as.numeric() %>%
round()
return(output)
}
DF$Value <- sapply(DF$Value, DropDollar)
a <- "61492.6666666667"
as.numeric(a)
DropDollar(a)
a <- "$ 61492.6666666667"
DropDollar <- function(input){
if (grepl("\\$", input)) {
output <- input %>%
str_replace("\\$ ", "") %>%
str_replace(",", "") %>%
as.numeric() %>%
round()
} else {
output <- input %>% str_replace(",", "") %>%
str_replace(".0", "") %>% as.numeric()
}
return(output)
}
DropDollar(a)
head(input, 10000)
DF[5926,]
# if you want, you can save the year dataframe as xls file in local directory
# write.xlsx(year2019, "./datasets/year2019.xlsx")
# write.xlsx(year2018, "./datasets/year2018.xlsx")
write.xlsx(year20182019, "./datasets/year2018-2019.xlsx")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library('readxl')
library('rvest')
library('lubridate')
library('zoo')
library('openxlsx')
library('tidyverse')
# library('kableExtra')
get_xls_file_from_html <- function() {
dataurl <- "https://www.glassdoor.com/research/job-market-report-historical/"
page <- read_html(dataurl)
excels1 <- grep("\\.xlsx", html_nodes(page, "a"), value = T)
excels2 <- gsub(".*href=\"", "", excels1)
excels <- gsub("xlsx.*", "xlsx", excels2)
excels_path <- as.character(sapply(excels,
FUN = substr,
start = 64,
stop = max(sapply(excels, nchar))))
excels_path1_31 <- gsub(".*data-", "", excels_path[1:31])
excels_path[32] <- "2017-05.xlsx"
excels_path[33] <- "2017-04.xlsx"
excels_path[34] <- "2017-03.xlsx"
excels_path[35] <- "2017-02.xlsx"
excels_path[36] <- "2017-01.xlsx"
excels_path[37] <- "2016-12.xlsx"
excels_path[38] <- "2016-11.xlsx"
excels_path[39] <- "2016-10.xlsx"
excels_path <- c(excels_path1_31, excels_path[32:39])
destination <- paste("./datasets/", excels_path, sep = "")
#file extraction
mapply(function(x, y) download.file(x, y, mode="wb"), x = excels, y = destination)
}
load("filespath.RData")
# checkIfFilesExist <- function(filespath){
#      if (!file.exists(filespath)) {
#           get_xls_file_from_html()
#      }
# }
# check_if_fileexist <- function(){
#     if (!file.exists(filespath)) {
#         get_xls_file_from_html
#     }
# }
# mapply(check_if_fileexist)
# select_files_to_read <- function(month = "Dec", year = 2019) {
#     load("filespath.RData")
#
#     if (month == "Dec") {
#         month_num = 1
#     } else if (month == "Nov") {
#         month_num = 2
#     } else if (month == "Oct") {
#         month_num = 3
#     } else if (month == "Sep") {
#         month_num = 4
#     } else if (month == "Aug") {
#         month_num = 5
#     } else if (month == "Jul") {
#         month_num = 6
#     } else if (month == "Jun") {
#         month_num = 7
#     } else if (month == "May") {
#         month_num = 8
#     } else if (month == "Apr") {
#         month_num = 9
#     } else if (month == "Mar") {
#         month_num = 10
#     } else if (month == "Feb") {
#         month_num = 11
#     } else {
#         month_num = 12
#     }
#
#     files <- list("2019" = filespath[1:12],
#                   "2018" = filespath[13:24],
#                   "2017" = filespath[25:36],
#                   "2016" = filespath[37:39])
#
#     if (year == 2016) {
#         yearOrder <- 4
#         if (month == "Dec" | month == "Nov" | month == "Oct") {
#             xlsname <<- paste0(month, year)
#             year_char <- as.character(year)
#             tempfilename <<- as.data.frame(read_xlsx(files[[yearOrder]][month_num]))
#         } else {
#             stop("Year 2016 have Dec, Nov and Oct files only.")
#         }
#     } else {
#         xlsname <<- paste0(month, year)
#         if (year == 2019) {
#             yearOrder <- 1
#         } else if (year == 2018) {
#             yearOrder <- 2
#         } else {
#             yearOrder <- 3
#         }
#         tempfilename <<- as.data.frame(read_xlsx(files[[yearOrder]][month_num]))
#     }
# }
#
# dump("select_files_to_read", file = "select_files_to_read.R")
source("select_files_to_read.R")
# select_files_to_read("Dec", 2019)
# myexport <- function(...) {
#     arg.list <- list(...)
#     names <- all.names(match.call())[-1]
#     for (i in seq_along(names)) assign(names[i],arg.list[[i]],.GlobalEnv)
# }
loadMultipleFiles <- function(nmonth = c("Dec"), nyear = c(2019)) {
files_list1 <- list()
year <- 1:length(nyear)
month <- 1:length(nmonth)
totalIterate <<- length(nmonth) * length(nyear)
for (i in year) {
if (length(year) == 1) {
for (j in month) {
select_files_to_read(nmonth[j], nyear)
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
break
}
for (j in month) {
# browser()
select_files_to_read(nmonth[j], nyear[i])
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
# browser()
}
# browser()
}
files_list <<- files_list1
}
loadMultipleFiles(
nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"),
nyear = c(2018))
for (k in 1:totalIterate) {
# browser()
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
# browser()
}
loadMultipleFiles(
nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"),
nyear = c(2019))
for (k in 1:totalIterate) {
# browser()
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
# browser()
}
# rm(files_list, tempfilename)
# totalDF <- ls(pattern = "2019")
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
year2018 <- rbind(Apr2018, Aug2018, Dec2018, Feb2018, Jan2018, Jul2018, Jun2018, Mar2018, May2018, Nov2018, Oct2018, Sep2018)
year20182019 <- rbind(year2018, year2019)
# if you want, you can save the year dataframe as xls file in local directory
# write.xlsx(year2019, "./datasets/year2019.xlsx")
# write.xlsx(year2018, "./datasets/year2018.xlsx")
# write.xlsx(year20182019, "./datasets/year2018-2019.xlsx")
# for ease of use and saving more memory, we need to remove all unnecessary objects
temp_objects <- ls()
rm(list = temp_objects[-c(11,19,28,35)])
rm(temp_objects)
str(year20182019)
colnames(year20182019) <- c("Metro", "Dimension_Type", "Date", "Dimension", "Measure", "Value", "YoY")
year20182019 %>% is.na() %>% colSums()
year20182019[is.na(year20182019$Dimension),]
year20182019[is.na(year20182019$Value),]
year20182019[is.na(year20182019$YoY),]
DF <- year20182019[-c(length(year20182019))]
DF <- drop_na(DF)
head(DF)
is.na(DF) %>% colSums()
nrow(DF[DF$Dimension != "Labor Force Size" |
DF$Dimension != "Total Employment" |
DF$Dimension != "Unemployment Rate", ])
DF[DF$Dimension != "Labor Force Size" |
DF$Dimension != "Total Employment" |
DF$Dimension != "Unemployment Rate", ]
DF[DF$Dimension = "Labor Force Size" |
DF[DF$Dimension == "Labor Force Size" |
DF$Dimension == "Total Employment" |
DF$Dimension == "Unemployment Rate", ]
sum(DF$Dimension == "Labor Force Size" |
DF$Dimension == "Total Employment" |
DF$Dimension == "Unemployment Rate")
DF$Dimension == "Labor Force Size" |
DF$Dimension == "Total Employment" |
DF$Dimension == "Unemployment Rate"
DF[DF$Dimension == "Labor Force Size" |
DF$Dimension == "Total Employment" |
DF$Dimension == "Unemployment Rate",]
DF[DF$Dimension != "Labor Force Size" |
DF$Dimension != "Total Employment" |
DF$Dimension != "Unemployment Rate",]
DF[DF$Dimension != "Labor Force Size" &
DF$Dimension != "Total Employment" &
DF$Dimension != "Unemployment Rate",]
DF <- DF[DF$Dimension != "Labor Force Size" &
DF$Dimension != "Total Employment" &
DF$Dimension != "Unemployment Rate",]
head(DF)
is.na(DF) %>% colSums()
head(DF)
is.na(DF) %>% colSums()
DF$Metro <- as.factor(DF$Metro)
DF$Dimension_Type <- as.factor(DF$Dimension_Type)
DF$Measure <- as.factor(DF$Measure)
head(DF$Date)
tail(DF$Date)
isString7Chars <- function(input) {
if (nchar(input) == 7) {
output <- paste0(input, '-01')
} else {
output <- input
}
}
DF$Date <- as.character(sapply(DF$Date, isString7Chars)) %>%
ymd()
DF
DropDollar <- function(input){
output <- input %>%
str_replace("\\$ ", "") %>%
str_replace_all(",", "") %>%
as.numeric() %>%
round()
return(output)
}
sapply(DF$Value, DropDollar)
cc <- as.data.frame(DF$Value)
is.na(cc1) %>% colSums()
is.na(cc) %>% colSums()
cc <- as.data.frame(DF$Value)
head(cc) <- as.data.frame(DF$Value)
head(cc)
cc <- as.data.frame(a = DF$Value)
cc <- as.data.frame("a" = DF$Value)
cc <- data.frame(a = DF$Value)
head(cc)
is.na(cc) %>% colSums()
DropDollar <- function(input){
if (grepl("\\$", input)) {
output <- input %>%
str_replace("\\$ ", "") %>%
str_replace_all(",", "") %>%
as.numeric() %>%
round()
} else {
output <- input %>% str_replace_all(",", "") %>%
str_replace(".0", "") %>% as.numeric()
}
return(output)
}
cc1 <- DropDollar(cc)
cc1 <- sapply(cc, DropDollar)
cc1 <- sapply(cc$a, DropDollar)
cc
options(max.print = 50000)
cc
a <- "$ 61,492.6666666667"
DropDollar(a)
a <- "$ 61492.6666666667"
DropDollar(a)
str_replace_all(a, ",", "")
a <- "$ 6,14,92.6666666667"
str_replace_all(a, ",", "")
a <- "$ 61492.6666666667"
str_replace_all(a, ",", "")
DropDollar <- function(input){
if (grepl("\\$", input)) {
output <- input %>%
str_replace("\\$ ", "") %>%
str_replace_all(",", "") %>%
as.numeric() %>%
round()
} else {
output <- input %>%
str_replace_all(",", "") %>%
as.numeric() %>%
round()
}
return(output)
}
cc1 <- sapply(cc$a, DropDollar)
warnings()
DropDollar <- function(input){
output <- input %>%
str_replace("\\$", "") %>%
str_replace_all(" ", "") %>%
str_replace_all(",", "") %>%
as.numeric() %>%
round()
return(output)
}
DF$Value <- sapply(DF$Value, DropDollar)
a <- "$123,00.23"
DropDollar(a)
a <- "$  123,00.23"
DropDollar(a)
a <- "$  123,00.0"
DropDollar(a)
a <- "$  123,.00.0"
DropDollar(a)
cc1 <- sapply(X = cc$a, FUN = DropDollar)
head(cc1)
names(cc1)
rownames(cc1)
?gsub
gsub(pattern = "\\$", "", a)
a <- "  123,.00.0"
gsub(pattern = "\\$", "", a)
gsub(pattern = " ", "", a)
b <- c(99.9, 101.02, 39.6)
round(b)
DropDollar <- function(input){
output <- input %>%
gsub("\\$", "") %>%
gsub(" ", "") %>%
gsub(",", "")
return(output)
}
DF$Value <- round(as.numeric(sapply(DF$Value, DropDollar)))
DF[is.na(DF$Value),]
DF[is.na(DF$Value),]
is.na(DF) %>% colSums()
DF <- year20182019[-c(length(year20182019))]
DF <- drop_na(DF)
DF <- DF[DF$Dimension != "Labor Force Size" &
DF$Dimension != "Total Employment" &
DF$Dimension != "Unemployment Rate",]
is.na(DF) %>% colSums()
head(DF$Value)
c <- c("$ 51,927", "$ 53,732", "$ 51,927", "118,496",  "$ 61,590", "$ 51,927")
c <- c("$ 51,927", "$53,732", " 51,927", "118,496",  "$ 61,590", "51,9927", "123,00,36")
DropDollar <- function(input){
output <- input %>%
gsub("\\$", "") %>%
gsub(" ", "") %>%
gsub(",", "")
return(output)
}
sapply(X = c, FUN = DropDollar)
c1 <- sapply(X = c, FUN = DropDollar)
DropDollar(c[1])
DropDollar <- function(input){
output <- gsub("\\$", "", input)
output <- gsub(" ", "", input)
output <- gsub(",", "", input)
return(output)
}
DropDollar(c[1])
DropDollar <- function(input){
output <- gsub("\\$", "", input)
output <- gsub(" ", "", output)
output <- gsub(",", "", output)
return(output)
}
DropDollar(c[1])
c <- c("$ 51,927", "$53,732", " 51,927", "118,496",  "$ 61,590", "51,9927", "123,00,36.256")
as.numeric(DropDollar(c[1]))
c1 <- sapply(X = c, FUN = DropDollar)
c1 <- as.numeric(sapply(X = c, FUN = DropDollar))
c1
DropDollar <- function(input){
output <- gsub("\\$", "", input)
output <- gsub(" ", "", output)
output <- gsub(",", "", output)
return(output)
}
DF$Value <- round(as.numeric(sapply(DF$Value, DropDollar)))
is.na(DF) %>% colSums()
DF[is.na(DF$Value),]
DF
options(max.print = 999)
DF[is.na(DF$Value),]
DF
is.na(DF) %>% colSums()
head(DF)
head(DF)
Salary_Jobs <- DF %>%
filter(Dimension_Type == "Job Title") %>%
select(Metro, Date, Dimension, Value)
colnames(Salary_Jobs) <- c("Area","Date","Job_Title", "Salary")
head(Salary_Jobs)
Salary_Jobs %>%
is.na() %>%
colSums()
Salary_Jobs$Job_Title <- as.factor(Salary_Jobs$Job_Title)
levels(Salary_Jobs$Job_Title)
Salary_Sectors <- DF %>%
filter(Dimension_Type == "Industry" & Measure == "Median Base Pay") %>%
select(Metro, Date, Dimension, Value)
colnames(Salary_Sectors) <- c("Area","Date","Sector", "Salary")
head(Salary_Sectors)
Salary_Sectors$Sector <- as.factor(Salary_Sectors$Sector)
levels(Salary_Sectors$Sector)
Salary_CompanySize <- DF %>%
filter(Dimension_Type == "Company Size" & Measure == "Median Base Pay") %>%
select(Metro, Date, Dimension, Value)
colnames(Salary_CompanySize) <- c("Area","Date","Company_Size", "Salary")
head(Salary_CompanySize)
Salary_CompanySize$Company_Size <- as.factor(Salary_CompanySize$Company_Size)
levels(Salary_CompanySize$Company_Size)
JobOpening_Sectors <- DF %>%
filter(Dimension_Type == "Industry" & Measure == "Job Openings") %>%
select(Metro, Date, Dimension, Value, YoY)
JobOpening_Sectors <- DF %>%
filter(Dimension_Type == "Industry" & Measure == "Job Openings") %>%
select(Metro, Date, Dimension, Value)
colnames(JobOpening_Sectors) <- c("Area","Date","Sector", "Openings")
head(JobOpening_Sectors)
JobOpening_Sectors$Sector <- as.factor(JobOpening_Sectors$Sector)
levels(JobOpening_Sectors$Sector)
JobOpening_CompanySize %>%
is.na() %>%
colSums()
JobOpening_CompanySize <- DF %>%
filter(Dimension_Type == "Company Size" & Measure == "Job Openings") %>%
select(Metro, Date, Dimension, Value, YoY)
JobOpening_CompanySize <- DF %>%
filter(Dimension_Type == "Company Size" & Measure == "Job Openings") %>%
select(Metro, Date, Dimension, Value)
colnames(JobOpening_CompanySize) <- c("Area","Date","Company_Size", "Openings")
head(JobOpening_CompanySize)
JobOpening_CompanySize %>%
is.na() %>%
colSums()
unique(JobOpening_CompanySize$Company_Size)
JobOpening_CompanySize <- JobOpening_CompanySize[JobOpening_CompanySize$Company_Size != "Other",]
JobOpening_CompanySize$Company_Size <- as.factor(JobOpening_CompanySize$Company_Size)
levels(JobOpening_CompanySize$Company_Size)
sq()
q()
