year2019$Value <- sapply(year2019$Value, function(x) as.numeric(gsub("[,$]", "", x)))
year2019$YoY <- sapply(year2019$YoY, function(x) as.numeric(gsub("[%]", "", x)))/100
ymd(cc)
class(ymd(cc))
year2019$Year_Month <- as.character(sapply(year2019$Year_Month, isString7Chars)) %>%
ymd()
year2019
unique(year2019$Metro)
knitr::opts_chunk$set(echo = TRUE)
library('readxl')
library('rvest')
library('lubridate')
library('zoo')
library('openxlsx')
library(tidyverse)
get_xls_file_from_html <- function() {
dataurl <- "https://www.glassdoor.com/research/job-market-report-historical/"
page <- read_html(dataurl)
excels1 <- grep("\\.xlsx", html_nodes(page, "a"), value = T)
excels2 <- gsub(".*href=\"", "", excels1)
excels <- gsub("xlsx.*", "xlsx", excels2)
excels_path <- as.character(sapply(excels,
FUN = substr,
start = 64,
stop = max(sapply(excels, nchar))))
excels_path1_31 <- gsub(".*data-", "", excels_path[1:31])
excels_path[32] <- "2017-05.xlsx"
excels_path[33] <- "2017-04.xlsx"
excels_path[34] <- "2017-03.xlsx"
excels_path[35] <- "2017-02.xlsx"
excels_path[36] <- "2017-01.xlsx"
excels_path[37] <- "2016-12.xlsx"
excels_path[38] <- "2016-11.xlsx"
excels_path[39] <- "2016-10.xlsx"
excels_path <- c(excels_path1_31, excels_path[32:39])
destination <- paste("./datasets/", excels_path, sep = "")
#file extraction
mapply(function(x, y) download.file(x, y, mode="wb"), x = excels, y = destination)
}
load("filespath.RData")
if (!file.exists(filespath)) {
get_xls_file_from_html
}
# check_if_fileexist <- function(){
#     if (!file.exists(filespath)) {
#         get_xls_file_from_html
#     }
# }
# mapply(check_if_fileexist)
source("select_files_to_read.R")
# select_files_to_read("Dec", 2019)
myexport <- function(...) {
arg.list <- list(...)
names <- all.names(match.call())[-1]
for (i in seq_along(names)) assign(names[i],arg.list[[i]],.GlobalEnv)
}
loadMultipleFiles <- function(nmonth = c("Dec"), nyear = c(2019)) {
files_list1 <- list()
year <- 1:length(nyear)
month <- 1:length(nmonth)
totalIterate <<- length(nmonth) * length(nyear)
for (i in year) {
if (length(year) == 1) {
for (j in month) {
select_files_to_read(nmonth[j], nyear)
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
break
}
for (j in month) {
# browser()
select_files_to_read(nmonth[j], nyear[i])
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
# browser()
}
# browser()
}
files_list <<- files_list1
}
loadMultipleFiles(nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"))
for (k in 1:totalIterate) {
# browser()
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
# browser()
}
rm(files_list, tempfilename)
# totalDF <- ls(pattern = "2019")
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
# write.xlsx(year2019, "./datasets/year2019.xlsx")
str(year2019)
colnames(year2019) <- c("Metro", "Dimension_Type", "Date", "Dimension", "Measure", "Value", "YoY")
unique(year2019$Metro)
unique(year2019$Dimension_Type)
unique(year2019$Dimension)
unique(year2019$Measure)
head(year2019$Date)
tail(year2019$Date)
head(year2019$Date, 50)
tail(year2019$Date, 50)
head(year2019$Date, 250)
tail(year2019$Date, 250)
head(year2019$Date, 5000)
head(year2019$Date)
tail(year2019$Date)
unique(year2019$Date)
isString7Chars <- function(input) {
if (nchar(input) == 7) {
output <- paste0(input, '-01')
} else {
output <- input
}
}
year2019$Year_Month <- as.character(sapply(year2019$Year_Month, isString7Chars)) %>%
ymd()
year2019
knitr::opts_chunk$set(echo = TRUE)
library('readxl')
library('rvest')
library('lubridate')
library('zoo')
library('openxlsx')
library(tidyverse)
get_xls_file_from_html <- function() {
dataurl <- "https://www.glassdoor.com/research/job-market-report-historical/"
page <- read_html(dataurl)
excels1 <- grep("\\.xlsx", html_nodes(page, "a"), value = T)
excels2 <- gsub(".*href=\"", "", excels1)
excels <- gsub("xlsx.*", "xlsx", excels2)
excels_path <- as.character(sapply(excels,
FUN = substr,
start = 64,
stop = max(sapply(excels, nchar))))
excels_path1_31 <- gsub(".*data-", "", excels_path[1:31])
excels_path[32] <- "2017-05.xlsx"
excels_path[33] <- "2017-04.xlsx"
excels_path[34] <- "2017-03.xlsx"
excels_path[35] <- "2017-02.xlsx"
excels_path[36] <- "2017-01.xlsx"
excels_path[37] <- "2016-12.xlsx"
excels_path[38] <- "2016-11.xlsx"
excels_path[39] <- "2016-10.xlsx"
excels_path <- c(excels_path1_31, excels_path[32:39])
destination <- paste("./datasets/", excels_path, sep = "")
#file extraction
mapply(function(x, y) download.file(x, y, mode="wb"), x = excels, y = destination)
}
load("filespath.RData")
if (!file.exists(filespath)) {
get_xls_file_from_html
}
# check_if_fileexist <- function(){
#     if (!file.exists(filespath)) {
#         get_xls_file_from_html
#     }
# }
# mapply(check_if_fileexist)
source("select_files_to_read.R")
# select_files_to_read("Dec", 2019)
myexport <- function(...) {
arg.list <- list(...)
names <- all.names(match.call())[-1]
for (i in seq_along(names)) assign(names[i],arg.list[[i]],.GlobalEnv)
}
loadMultipleFiles <- function(nmonth = c("Dec"), nyear = c(2019)) {
files_list1 <- list()
year <- 1:length(nyear)
month <- 1:length(nmonth)
totalIterate <<- length(nmonth) * length(nyear)
for (i in year) {
if (length(year) == 1) {
for (j in month) {
select_files_to_read(nmonth[j], nyear)
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
break
}
for (j in month) {
# browser()
select_files_to_read(nmonth[j], nyear[i])
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
# browser()
}
# browser()
}
files_list <<- files_list1
}
loadMultipleFiles(nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"))
for (k in 1:totalIterate) {
# browser()
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
# browser()
}
rm(files_list, tempfilename)
# totalDF <- ls(pattern = "2019")
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
# write.xlsx(year2019, "./datasets/year2019.xlsx")
str(year2019)
colnames(year2019) <- c("Metro", "Dimension_Type", "Date", "Dimension", "Measure", "Value", "YoY")
unique(year2019$Metro)
year2019$Metro <- as.factor(year2019$Metro)
unique(year2019$Dimension_Type)
year2019$Dimension_Type <- as.factor(year2019$Dimension_Type)
unique(year2019$Dimension)
unique(year2019$Measure)
year2019$Measure <- as.factor(year2019$Measure)
head(year2019$Date)
tail(year2019$Date)
isString7Chars <- function(input) {
if (nchar(input) == 7) {
output <- paste0(input, '-01')
} else {
output <- input
}
}
year2019$Year_Month <- as.character(sapply(year2019$Year_Month, isString7Chars)) %>%
ymd()
isString7Chars <- function(input) {
if (nchar(input) == 7) {
output <- paste0(input, '-01')
} else {
output <- input
}
}
year2019$Date <- as.character(sapply(year2019$Date, isString7Chars)) %>%
ymd()
head(year2019)
unique(year2019$Value)
head(year2019$Value)
tail(year2019$Value)
unique(year2019$Value)
head(year2019$YoY)
tail(year2019$YoY)
unique(year2019$YoY)
cc <- c("-0.21%", "0.33", "0.5%", "-1.3")
sapply(cc, function(x) as.numeric(gsub("[%]", "", x)))/100
year2019$YoY <- sapply(year2019$YoY, function(x) as.numeric(gsub("[%]", "", x)))/100
head(year2019)
year2019$Value <- sapply(year2019$Value, function(x) as.numeric(gsub("[,$]", "", x)))
head(year2019)
q()
knitr::opts_chunk$set(echo = TRUE)
library('readxl')
library('rvest')
library('lubridate')
library('zoo')
library('openxlsx')
library(tidyverse)
get_xls_file_from_html <- function() {
dataurl <- "https://www.glassdoor.com/research/job-market-report-historical/"
page <- read_html(dataurl)
excels1 <- grep("\\.xlsx", html_nodes(page, "a"), value = T)
excels2 <- gsub(".*href=\"", "", excels1)
excels <- gsub("xlsx.*", "xlsx", excels2)
excels_path <- as.character(sapply(excels,
FUN = substr,
start = 64,
stop = max(sapply(excels, nchar))))
excels_path1_31 <- gsub(".*data-", "", excels_path[1:31])
excels_path[32] <- "2017-05.xlsx"
excels_path[33] <- "2017-04.xlsx"
excels_path[34] <- "2017-03.xlsx"
excels_path[35] <- "2017-02.xlsx"
excels_path[36] <- "2017-01.xlsx"
excels_path[37] <- "2016-12.xlsx"
excels_path[38] <- "2016-11.xlsx"
excels_path[39] <- "2016-10.xlsx"
excels_path <- c(excels_path1_31, excels_path[32:39])
destination <- paste("./datasets/", excels_path, sep = "")
#file extraction
mapply(function(x, y) download.file(x, y, mode="wb"), x = excels, y = destination)
}
load("filespath.RData")
if (!file.exists(filespath)) {
get_xls_file_from_html
}
# check_if_fileexist <- function(){
#     if (!file.exists(filespath)) {
#         get_xls_file_from_html
#     }
# }
# mapply(check_if_fileexist)
source("select_files_to_read.R")
# select_files_to_read("Dec", 2019)
myexport <- function(...) {
arg.list <- list(...)
names <- all.names(match.call())[-1]
for (i in seq_along(names)) assign(names[i],arg.list[[i]],.GlobalEnv)
}
loadMultipleFiles <- function(nmonth = c("Dec"), nyear = c(2019)) {
files_list1 <- list()
year <- 1:length(nyear)
month <- 1:length(nmonth)
totalIterate <<- length(nmonth) * length(nyear)
for (i in year) {
if (length(year) == 1) {
for (j in month) {
select_files_to_read(nmonth[j], nyear)
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
}
break
}
for (j in month) {
# browser()
select_files_to_read(nmonth[j], nyear[i])
files_list1[[j]] <- tempfilename
names(files_list1)[j] <- xlsname
# browser()
}
# browser()
}
files_list <<- files_list1
}
loadMultipleFiles(nmonth = c("Dec","Nov","Oct","Sep","Aug","Jul","Jun","May","Apr","Mar","Feb","Jan"))
for (k in 1:totalIterate) {
# browser()
assign(names(files_list)[k], as.data.frame(files_list[[k]]))
# browser()
}
rm(files_list, tempfilename)
# totalDF <- ls(pattern = "2019")
year2019 <- rbind(Apr2019, Aug2019, Dec2019, Feb2019, Jan2019, Jul2019, Jun2019, Mar2019, May2019, Nov2019, Oct2019, Sep2019)
# write.xlsx(year2019, "./datasets/year2019.xlsx")
str(year2019)
colnames(year2019) <- c("Metro", "Dimension_Type", "Date", "Dimension", "Measure", "Value", "YoY")
unique(year2019$Metro)
year2019$Metro <- as.factor(year2019$Metro)
unique(year2019$Dimension_Type)
year2019$Dimension_Type <- as.factor(year2019$Dimension_Type)
unique(year2019$Dimension)
unique(year2019$Measure)
year2019$Measure <- as.factor(year2019$Measure)
head(year2019$Date)
tail(year2019$Date)
unique(year2019$Date)
isString7Chars <- function(input) {
if (nchar(input) == 7) {
output <- paste0(input, '-01')
} else {
output <- input
}
}
year2019$Date <- as.character(sapply(year2019$Date, isString7Chars)) %>%
ymd()
head(year2019$Value)
tail(year2019$Value)
unique(year2019$Value)
year2019$Value <- sapply(year2019$Value, function(x) as.numeric(gsub("[,$]", "", x)))
head(year2019$YoY)
tail(year2019$YoY)
unique(year2019$YoY)
year2019$YoY <- sapply(year2019$YoY, function(x) as.numeric(gsub("[%]", "", x)))/100
head(year2019)
Salary_Jobs <- year2019 %>%
filter(Dimension_Type == "Job Title") %>%
select(Metro, Date, Dimension, Value, YoY)
colnames(Salary_Jobs) <- c("Area","Date","Job_Title", "Salary", "YoY")
head(Salary_Jobs)
Salary_Jobs
Salary_Jobs %>%
is.na() %>%
colSums()
Salary_Sectors <- year2019 %>%
filter(Dimension_Type == "Industry" & Measure == "Median Base Pay") %>%
select(Metro, Date, Dimension, Value)
colnames(Salary_Sectors) <- c("Area","Date","Sector", "Salary")
Salary_Sectors
Salary_Sectors %>%
is.na() %>%
colSums()
Salary_CompanySize <- year2019 %>%
filter(Dimension_Type == "Company Size" & Measure == "Median Base Pay") %>%
select(Metro, Date, Dimension, Value)
colnames(Salary_CompanySize) <- c("Area","Date","Company_Size", "Salary")
Salary_CompanySize
Salary_CompanySize %>%
is.na() %>%
colSums()
JobOpening_Sectors <- year2019 %>%
filter(Dimension_Type == "Industry" & Measure == "Job Openings") %>%
select(Metro, Date, Dimension, Value, YoY)
colnames(JobOpening_Sectors) <- c("Area","Date","Sector", "Openings", "YoY")
JobOpening_Sectors
JobOpening_Sectors %>%
is.na() %>%
colSums()
JobOpening_CompanySize <- year2019 %>%
filter(Dimension_Type == "Company Size" & Measure == "Job Openings") %>%
select(Metro, Date, Dimension, Value, YoY)
colnames(JobOpening_CompanySize) <- c("Area","Date","Company_Size", "Openings", "YoY")
JobOpening_CompanySize
JobOpening_CompanySize %>%
is.na() %>%
colSums()
Salary_Jobs$Job_Title <- as.factor(Salary_Jobs$Job_Title)
Salary_Jobs
levels(Salary_Jobs$Job_Title)
Salary_Jobs
Salary_Sectors$Sector <- as.factor(Salary_Sectors$Sector)
levels(Salary_Sectors$Sector)
Salary_Sectors
Salary_CompanySize$Company_Size <- as.factor(Salary_CompanySize$Company_Size)
levels(Salary_CompanySize$Company_Size)
Salary_CompanySize
JobOpening_Sectors$Sector <- as.factor(JobOpening_Sectors$Sector)
levels(JobOpening_Sectors$Sector)
JobOpening_Sectors
unique(JobOpening_CompanySize$Company_Size)
obOpening_CompanySize$Company_Size == "Other"
JobOpening_CompanySize$Company_Size == "Other"
cc <- c(NA, "q", 2, NA, "12")
drop_na(cc)
?drop_na
?mutate
JobOpening_CompanySize <-
JobOpening_CompanySize[JobOpening_CompanySize != "Other",]
JobOpening_CompanySize$Company_Size <-
JobOpening_CompanySize$Company_Size[JobOpening_CompanySize$Company_Size != "Other"]
ifContainOtherOrNA <- function(input) {
if (is.character(input)) {
if (input == "Other") {
return(FALSE)
} else {
return(TRUE)
}
} else if (is.na(input)) {
return(FALSE)
} else {
return(TRUE)
}
}
JobOpening_CompanySize <- sapply(JobOpening_CompanySize, ifContainOtherOrNA)
# JobOpening_CompanySize$Company_Size <-
# JobOpening_CompanySize$Company_Size[JobOpening_CompanySize$Company_Size != "Other"]
# drop_na(JobOpening_CompanySize, Company_Size)
JobOpening_CompanySize %>%
is.na() %>%
colSums()
JobOpening_CompanySize <- year2019 %>%
filter(Dimension_Type == "Company Size" & Measure == "Job Openings") %>%
select(Metro, Date, Dimension, Value, YoY)
colnames(JobOpening_CompanySize) <- c("Area","Date","Company_Size", "Openings", "YoY")
JobOpening_CompanySize
JobOpening_CompanySize %>%
is.na() %>%
colSums()
# JobOpening_CompanySize$Company_Size <-
# JobOpening_CompanySize$Company_Size[JobOpening_CompanySize$Company_Size != "Other"]
drop_na(JobOpening_CompanySize)
JobOpening_CompanySize %>%
is.na() %>%
colSums()
# JobOpening_CompanySize$Company_Size <-
# JobOpening_CompanySize$Company_Size[JobOpening_CompanySize$Company_Size != "Other"]
JobOpening_CompanySize <- drop_na(JobOpening_CompanySize)
JobOpening_CompanySize %>%
is.na() %>%
colSums()
JobOpening_CompanySize
?match
match("Other", JobOpening_CompanySize$Company_Size)
match("Other", table = JobOpening_CompanySize$Company_Size)
"Other" in JobOpening_CompanySize$Company_Size
"Other" %in% JobOpening_CompanySize$Company_Size
JobOpening_CompanySize[JobOpening_CompanySize != "Other",]
JobOpening_CompanySize[JobOpening_CompanySize != "Other", 3]
JobOpening_CompanySize[21,3]
class(JobOpening_CompanySize[21,3])
JobOpening_CompanySize[JobOpening_CompanySize == "Other", 3]
JobOpening_CompanySize$Company_Size[JobOpening_CompanySize$Company_Size == "Other"]
JobOpening_CompanySize$Company_Size == "Other"
JobOpening_CompanySize$Company_Size != "Other"
JobOpening_CompanySize[JobOpening_CompanySize$Company_Size != "Other",]
JobOpening_CompanySize <- year2019 %>%
filter(Dimension_Type == "Company Size" & Measure == "Job Openings") %>%
select(Metro, Date, Dimension, Value, YoY)
colnames(JobOpening_CompanySize) <- c("Area","Date","Company_Size", "Openings", "YoY")
JobOpening_CompanySize
JobOpening_CompanySize %>%
is.na() %>%
colSums()
unique(JobOpening_CompanySize$Company_Size)
JobOpening_CompanySize <- JobOpening_CompanySize[JobOpening_CompanySize$Company_Size != "Other",] %>% drop_na()
JobOpening_CompanySize
JobOpening_CompanySize <- JobOpening_CompanySize[JobOpening_CompanySize$Company_Size != "Other",] %>% drop_na() %>% as.factor()
JobOpening_CompanySize
JobOpening_CompanySize <- year2019 %>%
filter(Dimension_Type == "Company Size" & Measure == "Job Openings") %>%
select(Metro, Date, Dimension, Value, YoY)
colnames(JobOpening_CompanySize) <- c("Area","Date","Company_Size", "Openings", "YoY")
JobOpening_CompanySize
JobOpening_CompanySize <- JobOpening_CompanySize[JobOpening_CompanySize$Company_Size != "Other",] %>% drop_na()
JobOpening_CompanySize$Company_Size <- as.factor(JobOpening_CompanySize$Company_Size)
JobOpening_CompanySize
JobOpening_CompanySize %>%
is.na() %>%
colSums()
levels(JobOpening_CompanySize$Company_Size)
q()
install.packages('rsconnect')
load("~/.rstudio-desktop/projects/P4DS_LBB/filespath.RData")
?dump
aa <- function(a,b){
c <- (a+b)/b
return(c)
}
dump("aa", file = "aa.R")
load("~/.rstudio-desktop/projects/P4DS_LBB/filespath.RData")
